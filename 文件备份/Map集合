#Map
1.Map属于java集合的API
2.Map是面向查找而设计的API
3.Map API的查找性能非常好
根据key（关键字）查找相应的value(对应的值)

Map是接口，定义了根据key查找Value的功能，其全部实现都提供了根据key查找value的功能呢。
value = get(key) : 最重要的方法

##Map接口：
1.Map中的Key不能重复，value可以重复
2.每个key对应唯一的value（value = get(key)）
3.根据key查找唯一的value
4.Map常见实现类有两个：
	- HashMap利用散列表算法实现的Map(重点)
	- TreeMap利用二叉排序树算法实现的Map

##HashMap
1.是Map接口的最常用的实现实现类
2.其内部采用了散列表算法
3.HashMap是计算机中查找速度最快的算法！

构造器
	Map map = new HashMap();
向map集合中添加数据，数据用于查找功能。
	map.put(key,value);
	第一次添加成功，返回null
	第二次是替换，返回原有value

##HashMap的工作原理：
LinkedList在查询元素时，采用的是顺序查询，当被查询元素在头尾时，速度很快，但是如果元素位于链表中部，则会出现顺序查找现象，性能非常差！
HashMap利用散列算法可以直接定位元素位置，所以查找性能优异，因为不是顺序查找，所以散列查找不受数据量影响。

散列算法的工作原理：
1. 在HashMap内部有一个数组用于存储Key-Value数据
2. 在添加数据时候，根据Key的hashCode()返回值计算在数组的存储位置，将key-value数据存储到数组的对应位置
3. 根据key查找时候，根据key的hashCode()计算出数组的下标位置，直接定位到数组中key-value数据，并返回value值
> HashMap查找特点：不进行顺序查找，直接利用算法定位数组中的下标位置。因为避免了顺序查找，所以查询性能很好！

### hashCode() 方法就是为散列表而设计的方法
1.Java为了在最底层支持散列表（HashMap哈希表）算法，在Object类上定义了hashCode()方法，用于支持散列表算法！
2.hashCode()方法和equals()是一对方法，需要一同重写！！！如果不成对重写这两个方法，会造成HashMap工作故障！
3.如果重写hashCode要遵循如下规则：
>当两个对象equals比较相等时候，两个对象必须有一样的hashCode值
>当两个对象equals比较不相等时，两个对象的hashCode尽可能不同
4.Eclipse 提供了成对生成equals和hashCode方法，利用工具生成即可。

### HashMap元素的添加过程(put)
HashMap中有一个数组用于存储key-value数据对
1.根据key的hashCode值，利用散列算法计算出数组下标位置。
2.找到数组下标位置
  >如果位置是null,则直接将key-value存储到数组中。
  >如果位置上有数据，则调用key的equals方法比较数组中存在的key
	-如果key相等，则替换对应的Value数据！
	-如果key不相等，则赵链表中后续元素，并且判断是否相等
		-如果key相等，则替换value
		-如果不相等则将key-value追加到链表的后部
-->概括：根据key的hashCode计算数组下标位置，在根据equals比较key是否相等，相等就替换，不等就插入

### HashMap元素的查找过程（get）
1.根据key的hashCode值，利用散列算法计算出数组下标位置。
2.找到数组下标位置
  >如果位置是null,则直接将key-value存储到数组中。
  >如果位置上有数据，则调用key的equals方法比较数组中存在的key
	-如果key相等，则替换对应的Value数据！
	-如果key不相等，则赵链表中后续元素，并且判断是否相等
		-如果key相等，则替换value
		-如果不相等则返回null
-->概述：先根据key的hashCode

### HashMap相关术语
1.HashMap中保存key-value的数组称为 散列表！
	- HashMap的数据按照散列值存储和添加顺序无关，但不是随即顺序（无序）
2.根据key的hashCode计算数组下标位置的算法称为散列算法，经过散列算法得到的数组下标称为 散列值！
	- HashMap中的散列算法即用二进制运算实现，性能极好。
3.当散列值相同时，key-value存储的链表结构称为 散列桶！
	- 在散列桶中查询是顺序查找，性能不好，原则上要避免出现散列桶
4.当Key的hashCode值很分散的时候，散列桶会变少！
	- hashCode的实现规则就是分散的原则。
5.HashMap 元素和数组容量的比值称为加载因子！
	- 当加载因子小于等于75%情况下，经过统计发现 很少出现散列桶，即便出现散列桶也很少超过3层。
6.当向HashMap添加数据时，其数据和数组容量比值大于75%时候，HashMap会对数组进行扩容，并且重新计算元素散列值，这个过程称为 重新散列！
	- 重新散列会影响散列表添加(put)性能！
	- 散列表提供了 重载构造器，可以预先设置数组的容量，避免重新散列，提高性能。

##### HashMap是如何存储的？
	









